name: Build and Deploy

on:
  create:
    tags:
      - '*'

env:
  ECR_REGISTRY: 345871662120.dkr.ecr.ap-southeast-1.amazonaws.com
  DOCKER_TAG: 345871662120.dkr.ecr.ap-southeast-1.amazonaws.com/freebooklist/api:latest
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-southeast-1
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws --version
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Tag and Push Docker Image
        run: |
          echo "Docker Tag: $DOCKER_TAG"
          docker build . -t $DOCKER_TAG --platform linux/amd64 || exit
          docker push $DOCKER_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy Docker to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd ~
            echo "Login to Amazon ECR, region: ${{ env.DOCKER_TAG }}"
            export AWS_ACCESS_KEY_ID=${{env.AWS_ACCESS_KEY_ID}}
            export AWS_SECRET_ACCESS_KEY=${{env.AWS_SECRET_ACCESS_KEY}}
            docker login -u AWS -p $(aws ecr get-login-password --region ${{env.AWS_REGION}}) ${{env.ECR_REGISTRY}}

            echo "GET Latest API Server Image: ${{ env.DOCKER_TAG }}"
            docker rmi ${{ env.DOCKER_TAG }}
            docker pull ${{ env.DOCKER_TAG }}

            echo "Reboot the Server"
            docker stop api && docker rm api
            sleep 1
            docker run -d --name api -p 80:8000 --env-file .env --restart unless-stopped ${{env.DOCKER_TAG}}
